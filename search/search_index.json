{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Luxos tooling","text":""},{"location":"#intro","title":"Intro","text":"<p>The luxos-tooling project provides:</p> <ol> <li>A consistent API to access miners through the the luxos python package (eg. <code>import luxos</code>)</li> <li>A bunch of utility cli scripts to help everyday maintenance (<code>luxos</code> and <code>health-checker</code> at the moment)</li> </ol> <p>NOTE If you're interested only in using the command line tool <code>luxos</code> please see recipes for   quick one liners, for everyday usage.</p>"},{"location":"#install","title":"Install","text":"<p>Detailed instruction on how to install it are provided  \ud83d\udc49 here, to install the latest released code:</p> <pre><code># to install it\n$&gt; pip install luxos\n\n# to upgrade it\n$&gt; pip install --upgrade luxos\n\n# to verify the current version\n$&gt; python -c \"import luxos; print(luxos.__version__, luxos.__hash__)\"\n0.0.7 27e53c7b37ac1bbb88112f3c931b9cd8f1a74a3a\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":"<p>The following will show how to use the included scripts (eg. <code>luxos</code>), how to use the user and internal APIs.</p>"},{"location":"#usage-cli","title":"Usage (cli)","text":"<p>The luxos wheel package comes with a luxos comand line script:</p> <p>This will reboot all miners in the <code>miner.csv</code> file list: <pre><code>   $&gt; luxos --ipfile miners.csv --cmd rebootdevice --timeout 2 --verbose\n</code></pre></p> <p>There's an <code>async</code> version that can work better on multiple miners, just use the <code>--async</code> flag: <pre><code>   $&gt; luxos --ipfile miners.csv --cmd version --timeout 2 --async --all\n   &gt; 10.206.1.153:4028\n   | {\n   |   \"STATUS\": [\n   |     {\n   |       \"Code\": 22,\n   |       \"Description\": \"LUXminer 2024.5.1.155432-f2badc0f\",\n</code></pre></p>"},{"location":"#usage-utils-api","title":"Usage (utils api)","text":"<p>The <code>luxos</code> package comes with an <code>luxos.utils</code> module to expose a simplified version of the internal API, useful to quickly execute commands on miners.</p>"},{"location":"#execute_commandrexec","title":"execute_command/rexec","text":"<p>This is way to get version data from a single miner using the API: <pre><code>   &gt;&gt;&gt; from luxos.utils import execute_command\n   &gt;&gt;&gt; execute_command(\"127.0.0.1\", 4028, 2, \"version\", \"\", False)\n   {'STATUS': [{'Code': 22, 'Description': 'LUXminer ...\n</code></pre></p> <p>The async version: <pre><code>   &gt;&gt;&gt; import asyncio\n   &gt;&gt;&gt; from luxos import utils\n   &gt;&gt;&gt; asyncio.run(utils.rexec(\"127.0.0.1\", 4028, \"vesion\"))\n   {'STATUS': [{'Code': 22, 'Description': 'LUXminer ...\n</code></pre> <code>rexec</code> takes care of formatting the parameters also, the full signature is: <pre><code>rexec(host=\"127.0.0.1\", port=4028, \n    cmd=\"version\", parameters=\"\",\n    timeout=2., retry=1, retry_delay=3.)\n</code></pre> <code>parameters</code> can be a string, a list of any type (it will be converted into a str) or a dictionary (same conversion to string will apply). timeout is the timeout for a call, retry is the number of try before giving up, and retry_delay controls the delay between retry.</p>"},{"location":"#launch","title":"launch","text":"<p>The <code>luxos.utils.lauch</code> allows to rexec commands to a list of miners stored in a file:</p> <pre><code>   &gt;&gt;&gt; import asyncio\n   &gt;&gt;&gt; from luxos import utils\n\n   # task is a callable with (host, port) signature\n   &gt;&gt;&gt; async def task(host: str, port: int):\n   ...   return await utils.rexec(host, port, \"version\")\n\n   # miners.csv contains a list of ip addresses, one per line\n   &gt;&gt;&gt; addresses = utils.load_ips_from_csv(\"miners.csv\")\n\n   # batched is a keyword argument to limit execution rate\n   &gt;&gt;&gt; asyncio.run(utils.launch(addresses, task, batch=None))\n   [{'STATUS': [{'Code': 22, 'Description': 'LUXmin ....\n\n   # the one-liner version\n   &gt;&gt;&gt; asyncio.run(utils.launch(addresses, utils.rexec, \"version\", batch=None))\n</code></pre>"},{"location":"api/","title":"Api","text":""},{"location":"develop/","title":"Develop","text":"<p>These are instructions for developers, to quickly start coding for <code>luxos</code>.</p>"},{"location":"develop/#pre-requisites","title":"Pre-requisites","text":"<p>There are essentially three pre-requisites.</p> <p>We assume you have installed a recent version of python (eg. &gt;=3.10) and the python binary is in the path. If so the following should be verified: <pre><code>$&gt; python3 --version\nPython 3.12.3\n</code></pre></p> <p>The code is from a github checkout: <pre><code>git clone https://github.com/LuxorLabs/luxos-tooling.git\n</code></pre></p> <p>Also we assume the current directory is the check out directory: <pre><code>cd luxos-tooling\n</code></pre></p>"},{"location":"develop/#setup","title":"Setup","text":"<p>You need (only once) to Create the python virtual environment, Setting up the repository,  then every time you restart a shell, you need to Activate the virtual environment.</p>"},{"location":"develop/#create-the-python-virtual-environment","title":"Create the python virtual environment","text":"<p>First you need to create a virtual environment and install all dependencies:</p> Windows*NIX <pre><code>$&gt; python3 -m venv %CD%\\venv\n\n$&gt; .\\venv\\Scripts\\activate.bat\n# on powershell\n$&gt; .\\venv\\Scripts\\activate.ps1\n\n$&gt; pip install -r tests\\requirements.txt\n$&gt; pip install -e .\n</code></pre> <pre><code>$&gt; python3 -m venv $(pwd)/venv  \n$&gt; source ./venv/bin/activate\n\n$&gt; pip install -r tests\\requirements.txt\n$&gt; pip install -e .\n</code></pre>"},{"location":"develop/#setting-up-the-repository","title":"Setting up the repository","text":"<p>Luxos leverages pre-commit to execute checks on code commit, so the code can be checked for issues before being submitted to the repo.</p> Windows*NIX <pre><code>$&gt; .\\venv\\Scripts\\activate  \n# on powershell\n$&gt; .\\venv\\Scripts\\activate.ps1\n\n$&gt; pre-commit install\n</code></pre> <pre><code>$&gt; source ./venv/bin/activate\n$&gt; pre-commit install\n</code></pre> <ul> <li>ACTIVATE the environment (each time you start a new shell)  Windows <pre><code>.\\venv\\Scripts\\activate\n</code></pre> </li> </ul> *NIX <pre><code>source ./venv/bin/activate\n</code></pre> <ul> <li>RUN the tests</li> </ul> <p>(Windows &amp; *NIX)   <pre><code>pytest -vvs tests\n</code></pre></p>"},{"location":"develop/#coding","title":"Coding","text":""},{"location":"develop/#precommit","title":"Precommit","text":"<p>When it comes to coding, you can use pre-commit hooks to help you validate code at every git commit.</p> <ul> <li> <p>ENABLE precommit:   <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>DISABLE precommit:   <pre><code>pre-commit uninstall\n</code></pre></p> </li> <li> <p>SKIP CHECKS during git commit:   Use the <code>-n</code> flag:   <pre><code>git commit -n ....\n</code></pre></p> </li> </ul> <p>At every <code>git commit</code> code scanner ruff and mypy will run.</p>"},{"location":"installation/","title":"Installing Luxos","text":"<p>TL;DR</p> <p>If you're familiar with the python ecosystem, all you need is and you can safely skip the rest of this document: <pre><code>$&gt; pip install luxos\n</code></pre></p> <p>These are the end2end instructions to install luxos package, starting from scratch,  feel free to skip steps not relevant to your particular case.</p> <ul> <li>Installing Luxos<ul> <li>Install the system python interpreter</li> <li>Creating and using a virtual environment<ul> <li>Creating a new environment</li> <li>Activating the environment</li> <li>Uisng the newly creating environemn</li> </ul> </li> </ul> </li> </ul>"},{"location":"installation/#install-the-system-python-interpreter","title":"Install the system python interpreter","text":"<p>Here there are many choices, depending on the platform.</p> WindowsMac OS nativeMac OS brewLinuxConda <p>Head to python and download the  most recent installer following the on-screen instructions.</p> <p>MacOS comes pre-installed with python (3.9 under /usr/bin/python), which is supported .. just. You'd better off installing an update version from python, and follow the instructions.</p> <p>Brew is a very popular tool to install packages, including python. Once brew is setup  (please follow the instructions on their website), it should be possible to install python just typing:</p> <pre><code>brew install python\n</code></pre> <p>You can use the distro package manager to install your python interpter, something like:</p> <pre><code>yum install python\n(or)\nzypper install python\n(or)\napt install python\n</code></pre> <p>You might consider using conda for an advanced way to maintain python stacks, see details here. conda allows still to use pip to install packages, as well the conda command itself. It has support for toolchains as well.</p> <p>Once you have your system wide python installed, you can work creating a virtual env.</p> <p>Warning</p> <p>No matter how you installed your main python interpreter,  just make sure you're installing python3.x and not python2.x, this command should show something  reasonable:</p> <pre><code>$&gt; python3 --version\nPython 3.12.3\n</code></pre>"},{"location":"installation/#creating-and-using-a-virtual-environment","title":"Creating and using a virtual environment","text":"<p>Python can maintain mutiple environment side-by-side, with one environment set to run tests, one to create documentation, another with another packages set for a different project and so on.</p> <p>The steps to follow once the main system python interpreter is installed, are simple:</p> <ol> <li>create a new environment in a directory</li> <li>\"activate\" the newly create environmen</li> <li>install the packages</li> </ol>"},{"location":"installation/#creating-a-new-environment","title":"Creating a new environment","text":"<p>This will create a new environment under venv under the current directory </p> *NIXWindows <pre><code>$&gt; python3 -m venv $(pwd)/venv\n</code></pre> <pre><code>$&gt; python3 -m venv %CD%\\venv\n</code></pre>"},{"location":"installation/#activating-the-environment","title":"Activating the environment","text":"<p>Each time you need to use and environment, you can source the activate script that set for you the PATH and other variables.</p> *NIXWindows <pre><code>$&gt; source $(pwd)/venv/bin/activate\n</code></pre> <pre><code>$&gt; %CD%\\venv\\Scripts\\activate.bat\n</code></pre>"},{"location":"installation/#uisng-the-newly-creating-environemn","title":"Uisng the newly creating environemn","text":"<p>From an activated environment you can use <code>pip</code> to install python packages:</p> All <pre><code>(venv) $&gt; pip install luxos\nor\n(venv) $&gt; python3 -m pip install luxos\n</code></pre>"},{"location":"recipes/","title":"Recipes","text":"<p>This is a collection of recipes to use <code>luxos</code> cli command.</p> <p>All require a <code>miners.csv</code> file containing a list of machines. </p>"},{"location":"recipes/#update","title":"Update","text":"<p>PYTHONPATH=src python -m luxos --ipfile miners.csv --cmd updateset --params \"source=https://storage.googleapis.com/luxor-firmware/unstable/jpro-kpro-new-power-estimations\" --verbose --async</p> <p>PYTHONPATH=src python -m luxos --ipfile miners.csv --cmd updaterun</p> <p>PYTHONPATH=src python -m luxos --ipfile miners.csv --cmd config --async -a</p> <p>PYTHONPATH=src python -m luxos --ipfile miners.csv --cmd profileget --params  355MHz --async -a</p>"},{"location":"api/cli/","title":"The cli package","text":""},{"location":"api/cli/#intro","title":"Intro","text":"<p>Luxos comes with a convenient cli interface generator, similar to what click provides, but simplified for easier usage. It uses argparse underneath, and this is the simplest usage:</p> <pre><code>import luxos.cli.v1 as cli\n\n@cli.cli()\ndef main():\n    print(\"Hello\")\n\nif __name__ == \"__main__\"\n    main()\n</code></pre> <p>Note</p> <p>The tool is in the module <code>luxos.cli.v1</code>, and the <code>v1</code> denotes the first iteration of it. In future there  might be more versions to accomodate different scenarios.</p>"},{"location":"api/cli/#what-the-cli-package-can-do-for-you","title":"What the cli package can do for you","text":"<p>In the <code>v1</code> version the cli provides some standard flags common to all script leveraging it. By default it provides:</p> <ul> <li><code>-v|--verbose</code> and <code>-q|--quiet</code> flags to increase (decrease)  the logging verbosity level (see example 1)</li> <li><code>-c/--config</code> flag to point to a config file path (default to config.yaml, configurable as in example 3)</li> </ul> <p>In the design intentions the goal is to provide an easy and fast way to start writing a script, providing  support for extension, using only the internal python standard library and generally being simple.</p> <p>There are escape hatches to configure the cli to suit most use cases.</p>"},{"location":"api/cli/#starting","title":"Starting","text":"<p>The best way to familiarize with it is to following simple examples:</p> <ul> <li>the simplest basic cli showing how to document the script and using the logging \ud83d\udc49 simple1</li> <li>extend your script and add custom arguments \ud83d\udc49 simple2</li> <li>using magic module-level variable to configure the scrip \ud83d\udc49 simple3</li> <li>the smallest complete script \ud83d\udc49 simple4</li> </ul>"},{"location":"api/utils/","title":"Intro","text":"<p>This module contains some of the most common functions/classes to facilitate everyday development, They are mean to simplify smaller scripts, solving everyday issues.</p> <p>Note</p> <p>While fully tested the functions here aren't intended to be used in larger codebases, please consider using relevant functions/classes in other modules.</p>"},{"location":"api/utils/#luxos.utils","title":"<code>luxos.utils</code>","text":"<p>user facing functions for normal use</p>"},{"location":"api/utils/#luxos.utils.execute_command","title":"<code>execute_command(host, port, timeout, cmd, params, verbose)</code>","text":"<p>TBD</p>"},{"location":"api/utils/#luxos.utils.iter_ip_ranges","title":"<code>iter_ip_ranges(txt)</code>","text":"<p>iterate over ip ranges.</p> <p>The txt string cav have one of this formats:</p> <ol> <li>a single ip such as '127.0.0.1'</li> <li>an (inclusive) range using two ips separated by <code>-</code> as '127.0.0.1 - 127.0.0.3'</li> <li>a combination of the above <code>,</code> separated as '127.0.0.1 , 192.168.0.1-192.168.0.10'</li> </ol> <p>Example: <pre><code>for ip in iter_ip_ranges(\"127.0.0.1 , 127.0.0.3-127.0.0.15\"):\n    print(ip)\n\n127.0.0.1\n127.0.0.2\n127.0.0.3\n...\n127.0.0.15\n</code></pre></p>"},{"location":"api/utils/#luxos.utils.launch","title":"<code>launch(addresses, call, *args, **kwargs)</code>  <code>async</code>","text":"<p>launch an async function on a list of (host, port) miners</p> <p>Example: <pre><code>async printme(host, port, value):\n    print(await rexec(host, port, \"version\"))\nasyncio.run(launch([(\"127.0.0.1\", 4028)], printme, value=11, batch=10))\n</code></pre></p>"},{"location":"api/utils/#luxos.utils.load_ips_from_csv","title":"<code>load_ips_from_csv(path, port=4028)</code>","text":"<p>loads ip addresses from a csv file</p> <p><code>path</code> contains a list of ip addresses in the AAA.BBB.CCC.DDD form, one per line, and this function returns a list of tuples (host, port).</p> <p>Example: <pre><code>&gt;&gt;&gt; for host, port in load_ips_from_csv(\"miners.csv\"):\n...    print(f\"got: {host=}, {port=}\")\n\n120.0.0.1\n120.0.0.2\n...\n120.0.0.15\n</code></pre></p>"},{"location":"api/utils/#luxos.utils.rexec","title":"<code>rexec(host, port, cmd, parameters=None, timeout=None, retry=None, retry_delay=None)</code>  <code>async</code>","text":""},{"location":"api/cli/example1/","title":"example 1","text":"<p>This is the most basic cli script, showing the basics.</p> <pre><code>\"\"\"this line will be reported as 'description'\n\nMore lines will be put in the help message. You can\nput a larger description, some comments and an example here.\n\"\"\"\nimport argparse\nimport logging\nimport luxos.cli.v1 as cli\n\nlog = logging.getLogger(__name__)\n\n@cli.cli()\ndef main(args: argparse.Namespace):\n    log.debug(\"a debug message, need to use -v|--verbose to display it\")\n    log.info(\"an info message, you can silence it with -q|--quiet\")\n    log.warning(\"a warning!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>The help message: <pre><code>$&gt; python docs/examples/simple1.py --help\nusage: simple1.py [-h] [-v] [-q] [-c CONFIG]\n\nthis line will be reported as 'description'\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --verbose         report verbose logging (default: None)\n  -q, --quiet           report quiet logging (default: None)\n  -c CONFIG, --config CONFIG\n                        path to a config file (default: config.yaml)\n\nMore lines will be put in the help message. You can\nput a larger description, some comments and an example here.\n</code></pre></p> <p>Calling from the command line this script will output: <pre><code>INFO:__main__:an info message, you can silence it by passing with -q|--quiet\nWARNING:__main__:a warning!\nINFO:luxos.cli.v1:task completed in 0.00s\n</code></pre></p> <p>Plese note:</p> <p>NOTE: - the script has some default flags eg. <code>--verbose|--quiet|--config</code> - <code>--verbose|--quiet</code> flags control the logging level (by default set to logging.INFO) - at the end of the execution there's a timing report - <code>args</code> is a argparse.Namespace instance containing the \"arguments\" coming from the cli</p>"},{"location":"api/cli/example2/","title":"example 2","text":"<p>On top of simple1.py, a cli might want to define extra arguments and or options, this is the way is done:</p> <pre><code>import asyncio\nimport argparse\n\nimport luxos.cli.v1 as cli\n\ndef add_arguments(parser: argparse.ArgumentParser) -&gt; None:\n    parser.add_argument(\"-x\", type=int, default=0, help=\"set the x flag\")\n\ndef process_args(args: argparse.Namespace) -&gt; argparse.Namespace | None:\n    args.x = 2 * args.x\n\n@cli.cli(add_arguments, process_args)\nasync def main(args: argparse.Namespace):\n    \"\"\"a simple test script with a simple description\"\"\"\n    print(f\"Got for x='{args.x}'\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>Calling the script will result in: <pre><code>$&gt; python simple2.py -q\nGot for x='0'\n</code></pre></p> <pre><code>$&gt; python simple2.py -q -x 12\nGot for x='24'\n</code></pre> <p>The parser processing works in this way: <pre><code>parser creation\n  -&gt; adds default arguments (-q|-v|-c, internal)\n  -&gt; can use the add_arguments callback to cli.cli to add more arguments\n  -&gt; parser.parse_args() return args: argparse.Namespace()\n  -&gt; process_args(args) process args\nargs then is finally passed down to main(args).  \n</code></pre></p> <p>NOTE argparse makes the distintion between options and arguments even if both get added to the parser using the same parser.add_argument method.</p> <p>Basically it boils down to:</p> <p>if it is required to run the script, then it is an argument     -&gt; you can parser.add_argument(\"argument\")</p> <p>if it is NOT required to run the script, then it is an option     -&gt; you can parser.add_argument(\"--option\")</p>"},{"location":"api/cli/example3/","title":"examples3","text":"<p>At the very begin we introduced three options (-v|-q|-c) predefined: while nice to have default values for the log level and a default config file, some script might want to control those values in much finer detail. For example the default logging just dumps the records to the stderr, it uses a simple default record emitter etc.</p> <p>cli.v1 defines some script level magic variables that can be used to configure those defaults.</p> <pre><code>import argparse\nimport asyncio\nimport logging\n\nimport luxos.cli.v1 as cli\n\nlog = logging.getLogger(__name__)\n\nCONFIGPATH = \"booo.yaml\"\nLOGGING_CONFIG = {\n    # the following forces the starting log level to WARNING, you can change using multiple -q|-v flags\n    'level': logging.WARNING,\n    'format': \"%(asctime)s [%(levelname)s] %(message)s\",\n    'handlers': [\n        # this will write the records to stderr and a log file\n        logging.StreamHandler(),\n        logging.FileHandler(\"LuxOS-LoadControl.log\")\n    ],\n}\n\n\n@cli.cli()\nasync def main(args: argparse.Namespace):\n    log.debug(\"a debug message\")\n    log.info(\"an info message\")\n    log.warning(\"a warning!\")\n\n    # note as args.config is a pathlib.Path instance!\n    print(f\"Got: {args.config=}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>Here: - CONFIGPATH can point to an alternative configuration file - LOGGING_CONFIG is a dictionary used as kwargs in basicConfig</p> <p>The help reveals: <pre><code>$&gt; simple3.py --help\nusage: simple3.py [-h] [-v] [-q] [-c CONFIG]\n\noptions:\n  -h, --help            show this help message and exit\n  -v, --verbose         report verbose logging (default: None)\n  -q, --quiet           report quiet logging (default: None)\n  -c CONFIG, --config CONFIG\n                        path to a config file (default: booo.yaml)\n</code></pre></p> <p>The -c default argument is booo.yaml.</p> <pre><code>$&gt; simple3.py\n2024-05-03 20:09:26,920 [WARNING] a warning!\nGot: args.config=PosixPath('booo.yaml')\n\n$&gt; simple3.py -vv\n2024-05-03 20:10:00,552 [DEBUG] interpreter: /Users/antonio/venvs/luxos-tooling/bin/python\n2024-05-03 20:10:00,552 [DEBUG] version: 3.12.3 (v3.12.3:f6650f9ad7, Apr  9 2024, 08:18:47) [Clang 13.0.0 (clang-1300.0.29.30)]\n2024-05-03 20:10:00,552 [DEBUG] a debug message\n2024-05-03 20:10:00,552 [INFO] an info message\n2024-05-03 20:10:00,552 [WARNING] a warning!\n2024-05-03 20:10:00,552 [INFO] task completed in 0.00s\nGot: args.config=PosixPath('booo.yaml')\n</code></pre>"},{"location":"api/cli/example4/","title":"example4","text":"<p>This is the smallest script that can execute commands across miners, supporting batch operations:</p> <pre><code>import argparse\nimport asyncio\nimport logging\n\nimport luxos.cli.v1 as cli\nfrom luxos import utils, misc\n\nlog = logging.getLogger(__name__)\n\nCONFIGPATH = \"miners.csv\"\n\n\ndef add_arguments(parser: argparse.ArgumentParser):\n    parser.add_argument(\"-b\", \"--batch\", type=int, help=\"execute command limiting to batch concurrent operations\")\n    parser.add_argument(\"-p\", \"--port\", type=int, default=4028)\n    parser.add_argument(\"command\")\n    parser.add_argument(\"extra\", nargs=\"*\")\n\n\n@cli.cli(add_arguments)\nasync def main(args: argparse.Namespace):\n    addresses = utils.load_ips_from_csv(args.config, port=args.port)\n    for result in await utils.launch(addresses, utils.rexec, args.command, args.extra, batch=args.batch):\n        print(f\"{repr(result)}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"scripts/luxos/","title":"Script - luxos","text":"<p>This script can run commands on miners.</p> <p>Input to this script is a <code>*.csv</code> file, one IP per line, comments are marked with a <code>#</code> and empty lines are ignored.</p> <p>This will reboot all miners in the <code>miner.csv</code> file list: <pre><code>   $&gt; luxos --ipfile miners.csv --cmd rebootdevice --timeout 2 --verbose\n</code></pre></p> <p>There's an <code>async</code> version that can work better on multiple miners, just use the <code>--async</code> flag: <pre><code>   $&gt; luxos --ipfile miners.csv --cmd version --timeout 2 --async --all\n   &gt; 10.206.1.153:4028\n   | {\n   |   \"STATUS\": [\n   |     {\n   |       \"Code\": 22,\n   |       \"Description\": \"LUXminer 2024.5.1.155432-f2badc0f\",\n</code></pre> This will reboot all miners in the <code>miner.csv</code> file list: <pre><code>   $&gt; luxos --ipfile miners.csv --cmd rebootdevice --timeout 2 --verbose\n</code></pre></p> <p>There's an <code>async</code> version that can work better on multiple miners, just use the <code>--async</code> flag: <pre><code>   $&gt; luxos --ipfile miners.csv --cmd version --timeout 2 --async --all\n   &gt; 10.206.1.153:4028\n   | {\n   |   \"STATUS\": [\n   |     {\n   |       \"Code\": 22,\n   |       \"Description\": \"LUXminer 2024.5.1.155432-f2badc0f\",\n</code></pre></p>"}]}